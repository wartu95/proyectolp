package vista;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import com.toedter.calendar.JDateChooser;

import Validaciones.Regex;
import clases.Paciente;
import clases.TipoSeguro;
import mantenimiento.PacienteDAO;
import mantenimiento.TipoSeguroDAO;

import javax.swing.JComboBox;
import javax.swing.JToolBar;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Formatter;
import java.awt.event.ActionEvent;
import javax.swing.DefaultComboBoxModel;
import java.awt.SystemColor;

public class FrmMantePaci extends JFrame implements ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JLabel lblCodigo;
	private JLabel lblNombre;
	private JLabel lblDNI;
	private JLabel lblfecha;
	private JTextField txtIdCodigo;
	private JTextField txtNombre;
	private JTextField txtDNI;
	private JDateChooser txtFecha;
	private JLabel lblApellido;
	private JLabel lblTipo;
	private JLabel lblEdad;
	private JTextField txtApellido;
	private JTextField txtEdad;
	private JComboBox<Object> cboTipo;
	private JButton btnRegistrar;
	private JButton btnEliminar;

	PacienteDAO rPac = new PacienteDAO();

	DefaultTableModel model = new DefaultTableModel();
	private Object msj;
	private JButton btnNuevo;
	private JButton btnRegistra1;
	private JButton btnActualizar;
	private JTable tbPaciente;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmMantePaci frame = new FrmMantePaci();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmMantePaci() {
		setTitle("Mantenimiento Paciente");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 804, 438);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.textHighlight);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		lblCodigo = new JLabel("Codigo:");
		lblCodigo.setBounds(29, 32, 46, 14);
		contentPane.add(lblCodigo);

		lblNombre = new JLabel("Nombre:");
		lblNombre.setBounds(29, 61, 46, 14);
		contentPane.add(lblNombre);

		lblDNI = new JLabel("DNI:");
		lblDNI.setBounds(29, 86, 46, 14);
		contentPane.add(lblDNI);

		lblfecha = new JLabel("Fecha Nac.");
		lblfecha.setBounds(29, 117, 46, 14);
		contentPane.add(lblfecha);

		txtIdCodigo = new JTextField();
		txtIdCodigo.setBounds(82, 29, 86, 20);
		contentPane.add(txtIdCodigo);
		txtIdCodigo.setColumns(10);

		txtNombre = new JTextField();
		txtNombre.setColumns(10);
		txtNombre.setBounds(82, 58, 184, 20);
		contentPane.add(txtNombre);

		txtDNI = new JTextField();
		txtDNI.setColumns(10);
		txtDNI.setBounds(82, 83, 86, 20);
		contentPane.add(txtDNI);

		txtFecha = new JDateChooser();
		txtFecha.setBounds(82, 111, 113, 20);
		contentPane.add(txtFecha);

		lblApellido = new JLabel("Apellido:");
		lblApellido.setBounds(350, 61, 46, 14);
		contentPane.add(lblApellido);

		lblTipo = new JLabel("Tipo Seguro:");
		lblTipo.setBounds(350, 86, 141, 14);
		contentPane.add(lblTipo);

		lblEdad = new JLabel("Edad:");
		lblEdad.setBounds(350, 117, 46, 14);
		contentPane.add(lblEdad);

		txtApellido = new JTextField();
		txtApellido.setBounds(419, 58, 184, 20);
		contentPane.add(txtApellido);
		txtApellido.setColumns(10);

		txtEdad = new JTextField();
		txtEdad.setBounds(419, 114, 86, 20);
		contentPane.add(txtEdad);
		txtEdad.setColumns(10);

		cboTipo = new JComboBox();
		cboTipo.setModel(new DefaultComboBoxModel(new String[] { "sis", "essalud", "otros" }));
		cboTipo.setBounds(419, 82, 106, 22);
		contentPane.add(cboTipo);

		btnEliminar = new JButton("");
		btnEliminar.addActionListener(this);
		btnEliminar.setIcon(new ImageIcon(FrmMantePaci.class.getResource("/img/cancel.png")));
		btnEliminar.setBounds(699, 111, 29, 33);
		contentPane.add(btnEliminar);

		model.addColumn("Codigo");
		model.addColumn("Nombre");
		model.addColumn("Apellido");
		model.addColumn("DNI");
		model.addColumn("Fecha Nac.");
		model.addColumn("Seguro");
		model.addColumn("Edad");

		btnNuevo = new JButton("");
		btnNuevo.addActionListener(this);
		btnNuevo.setIcon(new ImageIcon(FrmMantePaci.class.getResource("/img/add.png")));
		btnNuevo.setBounds(545, 111, 39, 33);
		contentPane.add(btnNuevo);

		btnRegistra1 = new JButton("");
		btnRegistra1.addActionListener(this);
		btnRegistra1.setIcon(new ImageIcon(FrmMantePaci.class.getResource("/img/checked.png")));
		btnRegistra1.setBounds(594, 111, 39, 33);
		contentPane.add(btnRegistra1);

		btnActualizar = new JButton("");
		btnActualizar.addActionListener(this);
		btnActualizar.setIcon(new ImageIcon(FrmMantePaci.class.getResource("/img/update.png")));
		btnActualizar.setBounds(643, 111, 39, 33);
		contentPane.add(btnActualizar);

		tbPaciente = new JTable();
		tbPaciente.setBounds(29, 178, 738, 207);
		contentPane.add(tbPaciente);

		// Mostrar datos en la tabla
		DataPaciente();
		// Mostrar datos de vaja de la tabla
		mostrarData(0);

	}

	private void mostrarData(int posFila) {
		//declarar variables
				String cod,nomb,ape,dni,fech, edad;
				//paso 1--> obtener los datos de la tabla
				cod = tbPaciente.getValueAt(posFila, 0).toString();
				nomb = tbPaciente.getValueAt(posFila, 1).toString();
				ape = tbPaciente.getValueAt(posFila, 2).toString();
				dni = tbPaciente.getValueAt(posFila, 3).toString();
				edad = tbPaciente.getValueAt(posFila, 4).toString();
				fech = tbPaciente.getValueAt(posFila, 5).toString();
				//paso 2--> enviar los datos de la tabla a las cjas de texto
				txtIdCodigo.setText(cod);
				txtNombre.setText(nomb);
				txtApellido.setText(ape);
				txtDNI.setText(dni);
				txtEdad.setText(edad);
				try {
					txtFecha.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(fech));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

	}

	private void DataPaciente() {
		// 1.Limpiar la tabla
		model.setRowCount(0);
		// 2.llamar al proceso de consulta
		ArrayList<Paciente> lista = rPac.listarPaciente();
		// crear un bucle para el recorrido
		for (Paciente p : lista) {
			// crear un arreglo
			Object fila[] = { p.getCodigo(), p.getNombre(), p.getDni(), p.getFecha(), p.getApellido(), p.getEdad(),

			};
			// aï¿½adir la fila a la tabla
			model.addRow(fila);
		}

	}

	private void mensajeExito(String string) {
		JOptionPane.showMessageDialog(this, msj, "Sistema !", 1);

	}

	private void mensajeError(String string) {
		JOptionPane.showMessageDialog(this, msj, "Error", 0);

	}

	private String getApellido() {
		String ape = null;
		if (txtApellido.getText().length() == 0) {
			mensajeError("Ingresar el apellido");
			txtApellido.setText("");
			txtApellido.requestFocus();
		} else if (txtApellido.getText().trim().matches(Regex.APELLIDO_PAC)) {
			ape = txtApellido.getText().trim();
		} else {
			mensajeError("El apellido ingreado no cumple con el formato");
			txtApellido.setText("");
			txtApellido.requestFocus();

		}
		return ape;
	}

	private String getFecha() {
		// COMPLETAR LA VALIDACION DE FECHA
		String fecha = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		fecha = sdf.format(txtFecha.getDate());
		return fecha;
	}

	private String getDni() {
		String dni = null;
		if (txtDNI.getText().length() == 0) {
			mensajeError("Ingresar el DNI");
			txtDNI.setText("");
			txtDNI.requestFocus();
		} else if (txtDNI.getText().trim().matches(Regex.DNI_PAC)) {
			dni = txtDNI.getText().trim();
		} else {
			mensajeError("El DNI ingreado no cumple con el formato");
			txtDNI.setText("");
			txtDNI.requestFocus();

		}
		return dni;
	}

	private String getNombre() {
		String nomb = null;
		if (txtNombre.getText().length() == 0) {
			mensajeError("Ingresar el nombre");
			txtNombre.setText("");
			txtNombre.requestFocus();
		} else if (txtNombre.getText().trim().matches(Regex.NOMBRE_PAC)) {
			nomb = txtNombre.getText().trim();
		} else {
			mensajeError("El nombre ingreado no cumple con el formato");
			txtNombre.setText("");
			txtNombre.requestFocus();

		}
		return nomb;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnActualizar) {
			actionPerformedBtnActualizar(e);
		}
		if (e.getSource() == btnEliminar) {
			actionPerformedBtnEliminar(e);
		}
		if (e.getSource() == btnRegistra1) {
			actionPerformedBtnRegistra1(e);
		}
		if (e.getSource() == btnNuevo) {
			actionPerformedBtnNuevo(e);
		}
		// TODO Auto-generated method stub

	}

	protected void actionPerformedBtnNuevo(ActionEvent e) {
		nuevoPaciente();
	}

	private void nuevoPaciente() {
		txtIdCodigo.setText("");
		txtNombre.setText("");
		txtDNI.setText("");
		txtFecha.setDate(null);
		txtApellido.setText("");
		txtEdad.setText("");

	}

	protected void actionPerformedBtnRegistra1(ActionEvent e) {
		String nomb,ape,dni,edad,fecha;
		// entradas
		nomb = getNombre();
		ape = getApellido();
		dni = getDni();
		fecha = getFecha();
		
		//validar
		if(nomb == null || ape == null || dni == null  || fecha   == null) {
			return;
		}else {
			// procesos
			//crear  un objeto de tipo "usuario"
			Paciente p = new Paciente();
			//setear --> asignar los nuevos valores ingresados por la gui a los atributos privados
			p.setNombre(nomb);
			p.setApellido(ape);
			p.setDni(dni);
			p.setFecha(fecha);
			
			//llamar al proceso --> metodo registrar que se encuentra en la clase "GestionarUsuario"
			
			int ok = rPac.registrar(p);
			
			//validar el resultado del proceso de registro
			if(ok == 0) {
				mensajeError("Error en el registro");
			}else {
				mensajeExistoso("Registro Existoso");
				DataPaciente();
			}
			
		}
	}

	
	

	private void mensajeExistoso(String string) {
		JOptionPane.showMessageDialog(this, msj,"Sistema !",1);
		
	}

	protected void actionPerformedBtnEliminar(ActionEvent e) {
		eliminarPaciente();
	}

	private void eliminarPaciente() {
		// Declarar variable
		int codigo, opcion;
		// obtener el codigo
		codigo = getCodigo();
		// validar
		if (codigo == -1) {
			return;
		} else {
			// Venta de confirmacion
			opcion = JOptionPane.showConfirmDialog(this, "Seguro de eliminar", "Sistema", JOptionPane.YES_NO_OPTION);
			if (opcion == 0) {// Si se va eliminar
				// llamar al proceso de eliminar
				int ok = rPac.eliminar(codigo);
				// validar el resultado del proceso
				if (ok == 0) {
					mensajeError("Codigo no existe");
				} else {
					mensajeError("Paciente eliminado");
					DataPaciente();
				}
			}
		}

	}

	private int getCodigo() {
		int cod = -1;
		if (txtIdCodigo.getText().trim().length() == 0) {
			mensajeError("Ingresar el codigo del Usuario");
			txtIdCodigo.setText("");
			txtIdCodigo.requestFocus();
		} else {
			try {
				cod = Integer.parseInt(txtIdCodigo.getText());
			} catch (NumberFormatException e) {
				mensajeError("Erro en el formato del codigo");
				txtIdCodigo.setText("");
				txtIdCodigo.requestFocus();
			}

		}
		return cod;

	}

	protected void actionPerformedBtnActualizar(ActionEvent e) {
		actualizarPaciente();
	}

	private void actualizarPaciente() {
		// Declarar las variables
		int codigo;
		String nomb, ape, fecha, dni;

		// paso 1: Obtener los datos de la GUI -- entrada de datos
		codigo = getCodigo();
		nomb = getNombre();
		dni = getDni();
		fecha = getFecha();
		ape = getApellido();
		
		if (codigo == -1|| nomb == null || dni == null || fecha == null || ape == null) {
			return;
		} else {
			Paciente p = new Paciente();
			// setear ---> asignar los nuevos valores ingresados por la gui a los atributos
			// privados
			p.setNombre(nomb);
			p.setDni(dni);
			p.setFecha(fecha);
			p.setApellido(ape);
			codigo = getCodigo();

			// Llamar al proceso --->> metodo registra que se encuentra en la clase

			int ok = rPac.registrar(p);
			// validar el resultado del proceso de registro
			if (ok == 0) {
				mensajeError("Error en el registro");

			} else {
				mensajeExito("Registro Exitiso");
				DataPaciente();
			}
		}
	}

}
