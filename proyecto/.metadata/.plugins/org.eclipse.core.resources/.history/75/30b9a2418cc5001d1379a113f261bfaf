package vista;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JButton;
import com.toedter.calendar.JDateChooser;

import entidad.TipoUsuario;
import entidad.Usuario;
import mantenimiento.GestionTipoUsuarioDAO;
import mantenimiento.GestionUsuarioDAO;
import utils.Validaciones;

import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.DefaultButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import java.awt.SystemColor;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;

public class FrmRegistro extends JFrame implements ActionListener, MouseListener {

	private JPanel contentPane;
	private JTextField txtNombre;
	private JTextField txtApellido;
	private JTextField txtUsuario;
	private JPasswordField txtClave;
	private JDateChooser txtFecha;

	
	//INSTANCIAR UN OBJETO DE LA CLASE "GETIONARUSUARIO"
	GestionUsuarioDAO gUser = new GestionUsuarioDAO();
	GestionTipoUsuarioDAO gTipUser = new GestionTipoUsuarioDAO(); 
	
	private JTextField txtCodigo;
	private JButton btnEliminar;
	private JButton btnActualizar;
	private JButton btnBuscarCodigo;
	private JTable tbUsuarios;
	private JScrollPane scrollPane;
	private JButton btnNuevo;
	
	//Instanciar un objeto para la estructura de la tabla
	DefaultTableModel model = new DefaultTableModel();
	private JLabel lblTipoUsuario;
	private JComboBox cboTipoUsuario;
	
	
	
	
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmPaciente frame = new FrmPaciente();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmRegistro() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 823, 457);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.activeCaption);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lblRegistroDeUsuario = new JLabel("Registro de Usuario");
		lblRegistroDeUsuario.setHorizontalAlignment(SwingConstants.CENTER);
		lblRegistroDeUsuario.setFont(new Font("Tahoma", Font.BOLD, 17));
		lblRegistroDeUsuario.setForeground(Color.WHITE);
		lblRegistroDeUsuario.setOpaque(true);
		lblRegistroDeUsuario.setBackground(Color.DARK_GRAY);
		lblRegistroDeUsuario.setBounds(28, 11, 755, 32);
		contentPane.add(lblRegistroDeUsuario);
		
		JLabel lblCdigo = new JLabel("C\u00F3digo:");
		lblCdigo.setBounds(28, 65, 81, 14);
		contentPane.add(lblCdigo);
		
		JLabel lblNombre = new JLabel("Nombre:");
		lblNombre.setBounds(28, 94, 81, 14);
		contentPane.add(lblNombre);
		
		JLabel lblApellido = new JLabel("Apellido:");
		lblApellido.setBounds(28, 121, 81, 14);
		contentPane.add(lblApellido);
		
		JLabel lblUsuario = new JLabel("Usuario:");
		lblUsuario.setBounds(28, 146, 81, 14);
		contentPane.add(lblUsuario);
		
		JLabel lblClave = new JLabel("Clave:");
		lblClave.setBounds(28, 176, 81, 14);
		contentPane.add(lblClave);
		
		JLabel lblFecha = new JLabel("Fecha:");
		lblFecha.setBounds(28, 206, 81, 14);
		contentPane.add(lblFecha);
		
		txtNombre = new JTextField();
		txtNombre.setBounds(87, 91, 130, 20);
		contentPane.add(txtNombre);
		txtNombre.setColumns(10);
		
		txtApellido = new JTextField();
		txtApellido.setColumns(10);
		txtApellido.setBounds(87, 118, 130, 20);
		contentPane.add(txtApellido);
		
		txtUsuario = new JTextField();
		txtUsuario.setColumns(10);
		txtUsuario.setBounds(87, 146, 68, 20);
		contentPane.add(txtUsuario);
		
		txtClave = new JPasswordField();
		txtClave.setBounds(87, 173, 71, 20);
		contentPane.add(txtClave);
		
		JButton btnRegistrar = new JButton("Registrar");
		btnRegistrar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				registrarDatos();
			}
		});
		btnRegistrar.setBounds(28, 283, 105, 23);
		contentPane.add(btnRegistrar);
		
		txtFecha = new JDateChooser();
		txtFecha.setDateFormatString("dd-MM-yyyy");
		txtFecha.setBounds(87, 200, 95, 20);
		contentPane.add(txtFecha);
		
		btnEliminar = new JButton("Eliminar");
		btnEliminar.addActionListener(this);
		btnEliminar.setBounds(155, 325, 105, 21);
		contentPane.add(btnEliminar);
		
		txtCodigo = new JTextField();
		txtCodigo.setBounds(86, 63, 68, 19);
		contentPane.add(txtCodigo);
		txtCodigo.setColumns(10);
		
		btnActualizar = new JButton("Actualizar");
		btnActualizar.addActionListener(this);
		btnActualizar.setBounds(28, 325, 105, 21);
		contentPane.add(btnActualizar);
		
		btnBuscarCodigo = new JButton("");
		btnBuscarCodigo.addActionListener(this);
		btnBuscarCodigo.setIcon(new ImageIcon(FrmPaciente.class.getResource("/img/45213_nursery_hospital_enfermera_medical_nurse_icon.png")));
		btnBuscarCodigo.setBounds(167, 62, 40, 21);
		contentPane.add(btnBuscarCodigo);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(270, 65, 517, 322);
		contentPane.add(scrollPane);
		
		tbUsuarios = new JTable();
		tbUsuarios.addMouseListener(this);
		scrollPane.setViewportView(tbUsuarios);
		tbUsuarios.setFillsViewportHeight(true);
		
		btnNuevo = new JButton("Nuevo");
		btnNuevo.addActionListener(this);
		btnNuevo.setBounds(155, 284, 105, 21);
		contentPane.add(btnNuevo);
		//creaar las columnas de la tabla
		model.addColumn("Codigo");
		model.addColumn("Nombre");
		model.addColumn("Apellido");
		model.addColumn("Usuario");
		model.addColumn("Clave");
		model.addColumn("Fecha");
		

		
		//asociar objeto "model" a la tb usuario
		tbUsuarios.setModel(model);
		
		lblTipoUsuario = new JLabel("Tipo :");
		lblTipoUsuario.setBounds(28, 234, 50, 13);
		contentPane.add(lblTipoUsuario);
		
		cboTipoUsuario = new JComboBox();
		cboTipoUsuario.setBounds(87, 230, 105, 21);
		contentPane.add(cboTipoUsuario);
		//mostrar datos en la tabla
		cargarDataUsuario();
		//mostrar datos en la caja de texto
		mostrarData(0);
		//cargar data al cbo
		cargarDataCbo();
	}
	
	@SuppressWarnings("unchecked")
	private void cargarDataCbo() {
		//1 llamar al proceso
		ArrayList<TipoUsuario> lisTipoUser = gTipUser.listarTipoUsuario();
		//-->lista
		//null
		//2 validar el resultado del proceso 
		if(lisTipoUser.size() == 0) {
			mensajeError("Lista vacia");
			
		}else {
			cboTipoUsuario.addItem("Seleccione ...");
			for (TipoUsuario tipUser : lisTipoUser) {
				cboTipoUsuario.addItem(tipUser.getIdTipo()+" - "+tipUser.getDescripTipo());
				;
				
			}
		
			}
		}
		//

	

	void registrarDatos(){
		// variables
		String nomb,ape,user,clave,fecha;
		// entradas
		nomb = getNombre();
		ape = getApellidos();
		user = getUsuario();
		clave = getClave();
		fecha = getFecha();
		
		//validar
		if(nomb == null || ape == null || user == null || clave == null || fecha   == null) {
			return;
		}else {
			// procesos
			//crear  un objeto de tipo "usuario"
			Usuario u = new Usuario();
			//setear --> asignar los nuevos valores ingresados por la gui a los atributos privados
			u.setNombre(nomb);
			u.setApellido(ape);
			u.setUsuario(user);
			u.setClave(clave);
			u.setFechaNacimiento(fecha);
			
			//llamar al proceso --> metodo registrar que se encuentra en la clase "GestionarUsuario"
			
			int ok = gUser.registrar(u);
			
			//validar el resultado del proceso de registro
			if(ok == 0) {
				mensajeError("Error en el registro");
			}else {
				mensajeExistoso("Registro Existoso");
				cargarDataUsuario();
			}
			
			
		}
		// procesos
		// salidas
		
		
	}

	private void mensajeExistoso(String msj) {
		JOptionPane.showMessageDialog(this, msj,"Sistema !",1);
	}

	private String getFecha() {
		//completar la validacion de la fecha
		
		String fecha = null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		fecha = sdf.format(txtFecha.getDate());
		return fecha;
	}

	private String getClave() {
		String clave = null;
		//aplicar codigo para encriptar la clave
		
		//Tareaaaa
		
		clave = encriptado(String.valueOf(txtClave.getPassword()));
		return clave;
	}
	private String encriptado(String pass) {
				
				//01crear objeto
				StringBuilder encriptado = new StringBuilder();
				//02 asignarle el texto a la variable encriptado 
				encriptado.append(pass);
				//03 reemplazar //a->e, e->i, i->o, o->u, u->a  
				for (int i = 0; i < encriptado.length(); i++) {
					
					switch (encriptado.charAt(i)) {
					case 'a': encriptado.setCharAt(i, 'e');break;
					case 'e': encriptado.setCharAt(i, 'i');break;
					case 'i': encriptado.setCharAt(i, 'o');break;
					case 'o': encriptado.setCharAt(i, 'u');break;
					case 'u': encriptado.setCharAt(i, 'a');break;
					
					}
				}
				return encriptado.reverse().toString();
	}

	private String getUsuario() {
		String user = null;
		if(txtUsuario.getText().trim().length() == 0) {
			mensajeError("Ingresar el usuario");
			txtUsuario.setText("");
			txtUsuario.requestFocus();
		}else if(txtUsuario.getText().trim().matches(Validaciones.USUARIO)) {
			user = txtUsuario.getText().trim();
		}else {
			mensajeError("Error en el formato Ej., U001 ");
			txtUsuario.setText("");
			txtUsuario.requestFocus();
		}
		return user;
	}

	private String getApellidos() {
		String ape = null;
		if(txtApellido.getText().length() == 0) {
			mensajeError("Ingresar el apellido");
			txtApellido.setText("");
			txtApellido.requestFocus();
		}else if(txtApellido.getText().trim().matches(Validaciones.TEXTO)) {
			ape = txtApellido.getText().trim();
		}else {
			mensajeError("El apellido  ingresado no cumple con el formato");
			txtApellido.setText("");
			txtApellido.requestFocus();
		}
		return ape;
	}

	private String getNombre() {
		String nomb = null;
		if(txtNombre.getText().length() == 0) {
			mensajeError("Ingresar el nombre");
			txtNombre.setText("");
			txtNombre.requestFocus();
		}else if(txtNombre.getText().trim().matches(Validaciones.TEXTO)) {
			nomb = txtNombre.getText().trim();
		}else {
			mensajeError("El nombre ingresado no cumple con el formato");
			txtNombre.setText("");
			txtNombre.requestFocus();
		}
		return nomb;
	}

	private void mensajeError(String msj) {
		JOptionPane.showMessageDialog(this, msj, "Error",0);
	}
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == btnBuscarCodigo) {
			actionPerformedBtnBuscarCodigo(e);
		}
		if (e.getSource() == btnNuevo) {
			actionPerformedBtnNuevo(e);
		}
		if (e.getSource() == btnActualizar) {
			actionPerformedBtnActualizar(e);
		}
		if (e.getSource() == btnEliminar) {
			actionPerformedBtnEliminar(e);
		}
	}
	protected void actionPerformedBtnEliminar(ActionEvent e) {
		eliminarUsuario();
	}

	private void eliminarUsuario() {
		//declarar variables
		int codigo,opcion;
		//obtener codigo 
		codigo = getCodigo();
		//validar
		if(codigo == -1) {
			return;
		}else {
			//trabajar la ventana de confirmacion 
			opcion = JOptionPane.showConfirmDialog(this,"Seguro de eliminar","Sistema",JOptionPane.YES_NO_OPTION);
			if(opcion == 0) { // si se va eliminar
			//llamar al proceso de eliminar
			int ok = gUser.eliminar(codigo);
			//validar el resultado del proceso
			if(ok == 0) {
				mensajeError("codigo no existe");
				txtCodigo.setText("");
				txtCodigo.requestFocus();
				
			}else {
				mensajeExistoso("Usuario eliminado");
				cargarDataUsuario();
			}
			}
		}
		
	}

	private int getCodigo() {
		int cod = 0;
		if(txtCodigo.getText().trim().length() == 0) {
			mensajeError("INGRESAR EL CODIGO DEL USUARIO");
			txtCodigo.setText("");
			txtCodigo.requestFocus();
		}else {
			try {
				cod = Integer.parseInt(txtCodigo.getText());
			} catch (NumberFormatException e) {
				mensajeError("Error en el formato del codigo");
				txtCodigo.setText("");
				txtCodigo.requestFocus();
			}

		}
		return cod;
	}
	protected void actionPerformedBtnActualizar(ActionEvent e) {
		actualizarUsuario();
	}

	private void actualizarUsuario() {
		//declarar las mvariables
		int codigo;
		String nomb,ape,user,clave,fechNac;
		//paso 1: obtener los datos de las gui -- entrada de datos
		codigo = getCodigo();
		nomb = getNombre();
		ape = getApellidos();
		user = getUsuario();
		clave = getClave();
		fechNac = getFecha();
		//validar 
		if(codigo == -1 || nomb == null || ape == null || user == null || clave == null || fechNac   == null) {
			return;
		}else {

			//crear un objeto de tipo Usuario
			Usuario u = new Usuario();
			//setear los atributos(asignar los nuevos valores a los atributos privadops
			u.setNombre(nomb);
			u.setApellido(ape);
			u.setUsuario(user);
			u.setClave(clave);
			u.setFechaNacimiento(fechNac);
			u.setCodigo(codigo);
			// Llamar al proceso de "actualizar"
			int ok = gUser.actualizar(u);
			// validar el resultado del proceso de actualizar
			if (ok == 0) {
				mensajeError("Error en la actualización");
			} else {
				mensajeExistoso("Usuario actualizado");
				cargarDataUsuario();
			}
		}
	}
	protected void actionPerformedBtnNuevo(ActionEvent e) {
		nuevoUsuario();
	}

	private void nuevoUsuario() {
		txtCodigo.setText("");
		txtNombre.setText("");
		txtApellido.setText("");
		txtUsuario.setText("");
		txtClave.setText("");
		txtFecha.setDate(null);

	}

	protected void actionPerformedBtnBuscarCodigo(ActionEvent e) {
		buscarDatosUsuario();
	}

	private void buscarDatosUsuario() {
		int codigo;
		// paso 1 --> Obtener el código ingresado
		codigo = getCodigo();
		// paso 2 --> validar que el codigo ingresado responda al formato
		if (codigo == -1) {
			return;
		} else {
			// llamar al proceso de búsqueda
			Usuario user = gUser.buscarUsuario(codigo);
			// validar el resultado del proceso
			if (user == null) {
				mensajeError("Código no exite");
			} else {
				txtNombre.setText(user.getNombre());
				txtApellido.setText(user.getApellido());
				txtUsuario.setText(user.getUsuario());
				txtClave.setText(user.getClave());
				//fecha
				try {
					txtFecha.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(user.getFechaNacimiento()));
					
				} catch (ParseException e) {
					mensajeError("Error al cargar la fecha"+e.getMessage());
				}

			}

		}

	}
	//metodo para cargar los datos de la tabla
	private void cargarDataUsuario() {
		//limpiar la tabla
		model.setRowCount(0);
		//llamar al proceos de consulta
		ArrayList<Usuario> lista =gUser.listarUsuarios();
		//crear un bucle para el recorrido
		for (Usuario u : lista) {
			//crear un arreglo
			Object fila[] = { u.getCodigo(),
								u.getNombre(),
								u.getApellido(),
								u.getUsuario(),
								u.getClave(),
								u.getFechaNacimiento(),
					
			};
			//añadir la fila a la tabla
			model.addRow(fila);
			
		}
	}
	private void mostrarData(int posFila) {
		//declarar variables
		String cod,nomb,ape,user,clav,fech;
		//paso 1--> obtener los datos de la tabla
		cod = tbUsuarios.getValueAt(posFila, 0).toString();
		nomb = tbUsuarios.getValueAt(posFila, 1).toString();
		ape = tbUsuarios.getValueAt(posFila, 2).toString();
		user = tbUsuarios.getValueAt(posFila, 3).toString();
		clav = tbUsuarios.getValueAt(posFila, 4).toString();
		fech = tbUsuarios.getValueAt(posFila, 5).toString();
		//paso 2--> enviar los datos de la tabla a las cjas de texto
		txtCodigo.setText(cod);
		txtNombre.setText(nomb);
		txtApellido.setText(ape);
		txtUsuario.setText(user);
		txtClave.setText(clav);
		try {
			txtFecha.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(fech));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	public void mouseClicked(MouseEvent e) {
		if (e.getSource() == tbUsuarios) {
			mouseClickedTbUsuarios(e);
		}
	}
	public void mouseEntered(MouseEvent e) {
	}
	public void mouseExited(MouseEvent e) {
	}
	public void mousePressed(MouseEvent e) {
	}
	public void mouseReleased(MouseEvent e) {
	}
	protected void mouseClickedTbUsuarios(MouseEvent e) {
		//obtener el valor de la fila seleccionada 
		int posFila = tbUsuarios.getSelectedRow();
		//mostrar data
		mostrarData(posFila);
		
	}
}	










